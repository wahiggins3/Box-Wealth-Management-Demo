"""
Django settings for portal_project project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os # Add this import for os.path.join
from dotenv import load_dotenv # Import load_dotenv
import logging

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load .env file - check if it's in BASE_DIR or BASE_DIR.parent
dotenv_path = BASE_DIR.parent / '.env' 
if not dotenv_path.exists():
    dotenv_path = BASE_DIR / '.env' # Fallback if .env is inside the same dir as manage.py

# Log a message if .env file is not found
if not dotenv_path.exists():
    logging.warning("No .env file found. Using default or environment values.")
else:
    load_dotenv(dotenv_path=dotenv_path)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-qj&n7m@h0=x&^x^13!t9&7@c8_@=w1a@*g@1h+w%g9n*k7d%@d')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',  # Add Django Rest Framework
    'core', # Add your core app here
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'portal_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], # Add path to project-level templates directory
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'portal_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# Default SQLite configuration - suitable for development
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Add this setting to tell Django where to find your existing static files
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'css'),
    os.path.join(BASE_DIR, 'js'),
    os.path.join(BASE_DIR, 'static'),  # Add the new static directory
]

# For production, collect static files here
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Add these lines at the end of the file
LOGIN_REDIRECT_URL = '/'  # Redirect to the homepage (our current index view) after login
LOGOUT_REDIRECT_URL = '/' # Redirect to the homepage after logout

# Logging Configuration - Suppress Box SDK errors and show only metadata extraction
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {module}: {message}',
            'style': '{',
        },
        'clean': {
            'format': '{message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'clean',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'core': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        # Suppress Box SDK error messages
        'boxsdk': {
            'handlers': [],
            'level': 'CRITICAL',
            'propagate': False,
        },
        'boxsdk.network': {
            'handlers': [],
            'level': 'CRITICAL',
            'propagate': False,
        },
        'boxsdk.network.default_network': {
            'handlers': [],
            'level': 'CRITICAL',
            'propagate': False,
        },
        # Suppress metadata application service warnings
        'core.services.box_metadata_application': {
            'handlers': [],
            'level': 'CRITICAL',
            'propagate': False,
        },
    },
}

# Box API Configuration
BOX_CLIENT_ID = os.environ.get('BOX_CLIENT_ID')
BOX_CLIENT_SECRET = os.environ.get('BOX_CLIENT_SECRET')
BOX_ENTERPRISE_ID = os.environ.get('BOX_ENTERPRISE_ID')
BOX_JWT_KEY_ID = os.environ.get('BOX_JWT_KEY_ID')
BOX_PRIVATE_KEY_PATH = os.environ.get('BOX_PRIVATE_KEY_PATH')
BOX_JWT_PRIVATE_KEY_PASSPHRASE = os.environ.get('BOX_JWT_PRIVATE_KEY_PASSPHRASE')
BOX_PRIVATE_KEY_CONTENT = os.environ.get('BOX_PRIVATE_KEY_CONTENT')

# Flag to indicate if Box integration is properly configured
BOX_ENABLED = all([
    BOX_CLIENT_ID, 
    BOX_CLIENT_SECRET, 
    BOX_ENTERPRISE_ID, 
    BOX_JWT_KEY_ID, 
    (BOX_PRIVATE_KEY_PATH or BOX_PRIVATE_KEY_CONTENT)  # Either path or content must be provided
])

if not BOX_ENABLED and DEBUG:
    logging.warning(
        "Box API integration is not fully configured. "
        "Set all required environment variables to enable document functionality."
    )
